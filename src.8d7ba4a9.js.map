{"version":3,"sources":["js/training/loadGrain.js","index.js"],"names":["loadGrain","levels","result","grain","maxHeight","length","highestPoint","Math","max","highestPointIdx","indexOf","getGrain","i","currentHeight","at","console","log"],"mappings":";;;AAQA,SAASA,EAAUC,GAEXC,MAAAA,EAAS,CACbC,MAAO,EACPC,UAAW,GAGTH,GAAAA,EAAOI,OAAS,EAAG,OAAOH,EAAOC,MAE/BG,MAAAA,EAAeC,KAAKC,OAAOP,GAC3BQ,EAAkBR,EAAOS,QAAQJ,GAE9BK,SAAAA,EAASC,GACVC,MAAAA,EAAgBZ,EAAOa,GAAGF,GAChCG,QAAQC,IAAI,gBAAiBH,GAEzBX,EAAOE,UAAYS,IAAeX,EAAOE,UAAYS,GAEzDE,QAAQC,IAAI,mBAAoBd,EAAOE,WACvCF,EAAOC,OAASD,EAAOE,UAAYS,EAGhC,IAAA,IAAID,EAAI,EAAGA,EAAIH,EAAiBG,GAAK,EACxCD,EAASC,GAGXV,EAAOE,UAAY,EACd,IAAA,IAAIQ,EAAIX,EAAOI,OAAS,EAAGO,EAAIH,EAAiBG,GAAK,EACxDD,EAASC,GAGJV,OAAAA,EAAOC,MAIhBY,QAAQC,IAAI,8BACZD,QAAQC,IAAIhB,EAAU,CAAC,EAAG,EAAG,KAC7Be,QAAQC,IAAI,uCAEZD,QAAQC,IAAI,2CACZD,QAAQC,IAAIhB,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACzCe,QAAQC,IAAI,uCAEZD,QAAQC,IAAI,uCACZD,QAAQC,IAAIhB,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KACtCe,QAAQC,IAAI,uCAEZD,QAAQC,IAAI,8BACZD,QAAQC,IAAIhB,EAAU,CAAC,EAAG,EAAG,KAC7Be,QAAQC,IAAI,uCAEZD,QAAQC,IAAI,2BACZD,QAAQC,IAAIhB,EAAU,CAAC,EAAG,KAC1Be,QAAQC,IAAI,uCAEZD,QAAQC,IAAI,uBACZD,QAAQC,IAAIhB,EAAU,KACtBe,QAAQC,IAAI,uCAEZD,QAAQC,IAAI,uCACZD,QAAQC,IAAIhB,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KACtCe,QAAQC,IAAI;;AC3CZ,aA1BA,QAAA,oBA0BA,QAAA","file":"src.8d7ba4a9.js","sourceRoot":"../src","sourcesContent":["// Зернова угода діє. Дано масив, що містить висоту рівнів баржі на 2d площині, причому кожен рівень має ширину 1. Яка максимальна кількість одиниць зерна, яку можна завантажити на баржу?\n\n// Кожен рівень знаходиться безпосередньо поруч із рівнем, що стоїть поруч із ним в масиві, за винятком випадків, коли показана висота 0, тоді це дно баржі.\n\n// Окрему одиницю можна уявити як двомірний квадрат шириною 1.\n\n// Слідкуйте за швидкодією: вам знадобиться рішення, лінійне кількості рівнів (кількість ітерацій має бути кратною кількості рівнів, а не збільшуватися експоненційно).\n\nfunction loadGrain(levels) {\n  // your code here\n  const result = {\n    grain: 0,\n    maxHeight: 0,\n  };\n\n  if (levels.length < 3) return result.grain;\n\n  const highestPoint = Math.max(...levels);\n  const highestPointIdx = levels.indexOf(highestPoint);\n\n  function getGrain(i) {\n    const currentHeight = levels.at(i);\n    console.log('currentHeight', currentHeight);\n\n    if (result.maxHeight < currentHeight) result.maxHeight = currentHeight;\n\n    console.log('result.maxHeight', result.maxHeight);\n    result.grain += result.maxHeight - currentHeight;\n  }\n\n  for (let i = 0; i < highestPointIdx; i += 1) {\n    getGrain(i);\n  }\n\n  result.maxHeight = 0;\n  for (let i = levels.length - 1; i > highestPointIdx; i -= 1) {\n    getGrain(i);\n  }\n\n  return result.grain;\n}\n\n// Приклади тестів\nconsole.log('loadGrain([4, 1, 3]); // 2');\nconsole.log(loadGrain([4, 1, 3]));\nconsole.log('-----------------------------------');\n\nconsole.log('loadGrain([2, 1, 5, 2, 7, 4, 10]); // 7');\nconsole.log(loadGrain([2, 1, 5, 2, 7, 4, 10]));\nconsole.log('-----------------------------------');\n\nconsole.log('loadGrain([2, 0, 1, 5, 2, 7]); // 6');\nconsole.log(loadGrain([2, 0, 1, 5, 2, 7]));\nconsole.log('-----------------------------------');\n\nconsole.log('loadGrain([2, 4, 2]); // 0');\nconsole.log(loadGrain([2, 4, 2]));\nconsole.log('-----------------------------------');\n\nconsole.log('loadGrain([7, 4]); // 0');\nconsole.log(loadGrain([7, 4]));\nconsole.log('-----------------------------------');\n\nconsole.log('loadGrain([]); // 0');\nconsole.log(loadGrain([]));\nconsole.log('-----------------------------------');\n\nconsole.log('loadGrain([1, 5, 5, 5, 0, 0]); // 0');\nconsole.log(loadGrain([1, 5, 5, 5, 0, 0]));\nconsole.log('-----------------------------------');\n","import './sass/main.scss';\n// import './js/practice/practice1';\n// import './js/practice/practice2';\n// import './js/practice/practice3';\n// import './js/practice/practice4';\n// import './js/practice/practice5';\n// import './js/practice/practice6';\n// import './js/practice/practice7';\n// import './js/practice/practice8';\n// import './js/practice/lection8-add';\n// import './js/practice/practice8-add';\n// import './js/practice/practice9';\n// import './js/practice/practice10';\n// import './js/practice/practice11';\n// import './js/practice/practice17';\n// import './js/practice/practice18';\n// import './js/practice/ObjectAssign-polyfill';\n// import './js/apps/game';\n// import './js/app/bookshelf';\n// import './js/app/timer';\n// import './js/movies';\n// import './js/food-service';\n// import './js/apps/events';\n// import './js/training/array-flat-polyfill';\n// import './js/training/findstring';\n// import './js/apps/pixabay';\nimport './js/training/loadGrain';\n"]}